import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { AutoComponent } from '../../sales/auto/auto.component';
import { AppComponent } from './../../app.component';
import { Router, RouterModule } from '@angular/router';
import { ProgressService } from '../../sales/auto/services/progress.service';
import { RouterTestingModule } from '@angular/router/testing';
import { HeaderComponent } from './header.component';


describe('HeaderComponent', () => {
  let component: HeaderComponent;
  let fixture: ComponentFixture<HeaderComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [HeaderComponent],
      providers: [ProgressService],
      imports: [
        RouterTestingModule.withRoutes([
          { path: '', redirectTo: 'sales/auto/', pathMatch: 'full' }])]
    })
      .compileComponents();
  }));


  beforeEach(() => {
    fixture = TestBed.createComponent(HeaderComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });


  it('Should return true if array contains string (class name)', () => {
    var array = ['test1', 'test2'];
    var className = 'test1';
    var result = component.hasClass(array, className);
    expect(result).toBe(true);
  })

  it('Should return false if array does not contain string (class name)', () => {
    var array = ['test1', 'test2'];
    var className = 'test3';
    var result = component.hasClass(array, className);
    expect(result).toBe(false);
  })

  it('Should return false if array is empty', () => {
    var array = [];
    var className = 'test3';
    var result = component.hasClass(array, className);
    expect(result).toBe(false);
  })

  it('Should return false if array is NOT empty and class name is empty', () => {
    var array = ['test1', 'test2'];
    var className = '';
    var result = component.hasClass(array, className);
    expect(result).toBe(false);
  })
});
